
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kugocdtesaczbfrwblsi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt1Z29jZHRlc2FjemJmcndibHNpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NzA0MjUsImV4cCI6MjA2MjE0NjQyNX0.nHNWlTMfxuwAKYaiw145IFTAx3R3sbfWygviPVSH-Zc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true
    },
    global: {
      headers: {
        'x-application-name': 'hrm-app'
      }
    }
  }
);

// Force TypeScript to use proper table types
export type Tables = Database['public']['Tables'];

// Helper function to check if a bucket exists
export async function checkBucketExists(bucketName: string): Promise<boolean> {
  try {
    const { data: buckets, error } = await supabase.storage.listBuckets();
    if (error) {
      console.error('Error checking buckets:', error);
      return false;
    }
    
    return buckets?.some(bucket => bucket.id === bucketName) || false;
  } catch (err) {
    console.error('Exception checking bucket existence:', err);
    return false;
  }
}

// Helper function to verify bucket access permissions
export async function verifyBucketAccess(bucketName: string): Promise<boolean> {
  try {
    // Try to list files as a simple permission check
    const { data, error } = await supabase.storage
      .from(bucketName)
      .list('', { limit: 1 });
      
    if (error) {
      console.error(`Access check for bucket '${bucketName}' failed:`, error);
      return false;
    }
    
    return true;
  } catch (err) {
    console.error('Exception during bucket access verification:', err);
    return false;
  }
}
